(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> dictionary update sequence element #0 has length 1; 2 is required"
p3
sS'layer'
p4
S'C:\\Users\\Megan\\Documents\\web2py_win\\web2py\\applications\\Mutate\\controllers/default.py'
p5
sS'code'
p6
S'import applications.Mutate.models.testinggithubapi.authenticate as authenticate\n\n\nTOKEN = "168b376e84e93235698060bda568dbfc30bfe460"\n\ndef index():\n    if response.flash != "":\n        if response.flash[1] is "Currently Searching":\n            session.flash = response.flash\n            redirect_notice=H1(\'You are currently mutating projects, please wait for this to complete.\')\n        else:\n            redirect_notice=None\n    else:\n        redirect_notice=None\n\n    return dict(dict=dict, redirect_notice=redirect_notice)\n\ndef mutateprojects():\n\n    if response.flash != "":\n        if response.flash[1] is "Currently Searching":\n            session.flash = response.flash\n            redirect_notice=H1(\'You are currently mutating projects, please wait for this to complete.\')\n            form = None\n        else:\n            form = None\n            redirect_notice=None\n    else:\n        # Subject Selection\n        form=FORM(DIV(FIELDSET(\n            LEGEND(\'Search For Repositories\'),\n            # Keyword\n              DIV(LABEL(\'Keyword\', _for=\'keyword\', _class=\'control-label\'),\n              DIV(INPUT(_name=\'keyword\'), _class=\'controls\'),  _class=\'control-group\'),\n            #Repo Size\n              DIV(LABEL(\'Repository Size\', _for=\'repo_size\', _class=\'control-label\'),\n              DIV(INPUT(_name=\'min_repo_size\', requires=[IS_NOT_EMPTY(), IS_INT_IN_RANGE(0,1000000)], _class=\'span2\', _placeholder=\'min\'),\n              INPUT(_name=\'max_repo_size\', requires=[IS_NOT_EMPTY(), IS_INT_IN_RANGE(0,1000000)], _class=\'span2\', _placeholder=\'max\'),\n              _class=\'controls controls-row\'), _class=\'control-group\'),\n\n            # Language\n              DIV(LABEL(\'Language\', _for=\'language\', _class=\'control-label\'),\n              DIV(SELECT(OPTION("Java"), _name=\'language\'), _class=\'controls\'),\n              _class=\'control-group\'),\n            # Order By\n              DIV(LABEL(\'Order Results by\', _for=\'order_by\', _class=\'control-label\'),\n              DIV(SELECT(OPTION("Forks"),OPTION("Stars"), _name=\'order_by\'), _class=\'controls\'),\n              _class=\'control-group\'),\n            # Asc/Desc\n              DIV(LABEL(\'Ascending/Descending\', _for=\'asc_desc\', _class=\'control-label\'),\n              DIV(SELECT(OPTION("Descending"),OPTION("Ascending"), _name=\'asc_desc\'), _class=\'controls\'),\n              _class=\'control-group\'),\n            # Number of results\n              DIV(LABEL(\'Number of Results\', _for=\'no_results\', _class=\'control-label\'),\n              DIV(INPUT(_name=\'no_results\', requires=[IS_NOT_EMPTY(), IS_INT_IN_RANGE(0,1000000)]), _class=\'controls\'),\n              _class=\'control-group\'),\n            # submit\n              DIV(DIV(DIV(BUTTON(\'Submit\',_type=\'submit\', _class="btn btn-large btn-primary")),_class="row"),\n                  _class="offset3 span3"))), _class = \'form-horizontal\', _action = URL(\'projectmutation\',\'results\'),\n                  _method = "post")\n        redirect_notice = None\n    return dict(form=form, redirect_notice=redirect_notice)\n\ndef register():\n     form=FORM(DIV(FIELDSET(\n         LEGEND(\'Register\'),\n         #username\n         DIV( LABEL(\'Github Username\', _for=\'username\', _class=\'control-label\'),\n              DIV(INPUT(_name=\'username\', requires=[IS_NOT_EMPTY(),\n                                                    IS_NOT_IN_DB(db, db.auth_user.username,\n                                                                 error_message="Username already taken")])\n                  , _class=\'controls\'),  _class=\'control-group\'),\n\n         #submit\n         DIV(DIV(DIV(BUTTON(\'Submit\',_type=\'submit\', _class="btn btn-large btn-primary")),_class="row"),\n             _class="offset3 span3"))), _class = \'form-horizontal\')\n\n     if form.accepts(request, session):\n         db.auth_user.insert(username=request.vars.username)\n         redirect(URL(\'default\',\'login.html\'))\n\n     return dict(form=form)\n\ndef login():\n    # Github Auth\n    form=FORM(DIV(FIELDSET(\n        LEGEND(\'User Details\'),\n        # username\n          DIV( LABEL(\'Username\', _for=\'username\', _class=\'control-label\'),\n          DIV(INPUT(_name=\'username\', requires=IS_NOT_EMPTY()), _class=\'controls\'),  _class=\'control-group\'),\n        # token\n          DIV(LABEL(\'Token\', _for=\'token\', _class=\'control-label\'),\n          DIV(INPUT(_name=\'token\', requires=IS_NOT_EMPTY()), _class=\'controls\'),\n          _class=\'control-group\'),\n        # submit\n          DIV(DIV(DIV(BUTTON(\'Submit\',_type=\'submit\', _class="btn btn-large btn-primary")),_class="row"),\n              _class="offset3 span3"))), _class = \'form-horizontal\')\n\n    if form.accepts(request, session):\n        session.auth_token = request.vars.token\n        auth.login_user(request.vars.username)\n        # test = authenticate.Authenticate()\n        # token = test.check_authentication(request.vars.username, request.vars.password, None)\n        # if token is False:\n        #     #Bad Credentials\n        #     session.flash=DIV(H4(\'Credentials Denied\'), _class="alert alert-danger")\n        #     redirect(location=URL(\'default\',\'index.html\'))\n        #\n        # else:\n        #     # Inform user logged in\n        #     session.flash=DIV(H4(\'Credentials Accepeted\', token), _class="alert alert-success")\n        #     redirect(location=URL(\'default\',\'index.html\'))\n        #\n        #\n        # #pass\n\n\n    return dict(form=form)\n\n\n\ndef about():\n    if response.flash != "":\n        if response.flash[1] is "Currently Searching":\n            session.flash = response.flash\n            redirect_notice=H1(\'You are currently mutating projects, please wait for this to complete.\')\n            form = None\n        else:\n            form = None\n            redirect_notice=None\n    else:\n        redirect_notice=None\n\n    return dict(dict=dict, redirect_notice=redirect_notice)\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(login)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 224, in restricted\n  File "C:\\Users\\Megan\\Documents\\web2py_win\\web2py\\applications\\Mutate\\controllers/default.py", line 184, in <module>\n  File "gluon/globals.py", line 392, in <lambda>\n  File "C:\\Users\\Megan\\Documents\\web2py_win\\web2py\\applications\\Mutate\\controllers/default.py", line 101, in login\n    auth.login_user(request.vars.username)\n  File "gluon/tools.py", line 2126, in login_user\n  File "gluon/dal.py", line 7487, in <lambda>\nValueError: dictionary update sequence element #0 has length 1; 2 is required\n'
p11
s.